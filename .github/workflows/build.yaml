name: Build Flutter

on:
  push:
    branches:
      - main
      - dev
    tags:
      - "v*" # Runs only when a version tag (e.g., v1.0.0) is pushed
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual execution

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.3"

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libblkid-dev e2fslibs-dev liblzma-dev libmpv-dev mpv ninja-build fuse desktop-file-utils libsecret-1-dev

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Build Flutter Linux App
        run: flutter build linux

      - name: Upload Linux Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-bin
          path: build/linux/x64/release/bundle

  build-flatpak:
    runs-on: ubuntu-latest
    needs: build-linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download linux-bin artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-bin
          path: ./linux-bin

      - run: zip -r linux-bin.zip linux-bin
      - run: ls -R

      - name: Upload Zipped Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-bin.zip
          path: linux-bin.zip

      - name: Install Flatpak and Dependencies
        run: |
          sudo apt update
          sudo apt install -y flatpak flatpak-builder libgtk-3-dev pkg-config libayatana-appindicator3-1
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install --user -y org.gnome.Sdk/x86_64/47 
          flatpak install --user -y org.gnome.Platform/x86_64/47

      - run: flatpak-builder --force-clean build-dir flatpak.yaml --repo=repo
      - run: flatpak build-bundle repo app.flatpak org.openmediastation.open_media_server_app

      - name: Upload Flatpak Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app.flatpak
          path: app.flatpak

  build-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.3"

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Decode Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > $RUNNER_TEMP/upload-keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=upload" >> android/key.properties
          echo "storeFile=$RUNNER_TEMP/upload-keystore.jks" >> android/key.properties

      - name: Build Flutter APK
        run: flutter build apk --release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-flutter-app.apk
          path: build/app/outputs/apk/release/app-release.apk

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Windows App
        run: flutter build windows

      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: build\windows\x64\runner\Release\

      - name: Zip Windows Build
        run: |
          Compress-Archive -Path build\windows\x64\runner\Release\* -DestinationPath windows-bin.zip
        shell: pwsh

      - name: Upload Zipped Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-bin.zip
          path: windows-bin.zip

  build-ios:
    runs-on: macos-latest  # Nutzt macOS für Xcode & iOS Builds

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.3"
          cache: true

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 📱 Build iOS App
        run: flutter build ios --no-codesign

      # Optional: Signiere das iOS-Build mit einem kostenpflichtigen Apple Developer Account
      - name: 🔑 Setup Code Signing (Falls Apple-Zertifikat vorhanden)
        if: env.APPLE_SIGNING_CERT != ''
        env:
          APPLE_SIGNING_CERT: ${{ secrets.APPLE_SIGNING_CERT }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
        run: |
          echo "$APPLE_SIGNING_CERT" | base64 --decode > apple_distribution.p12
          echo "$APPLE_PROVISIONING_PROFILE" | base64 --decode > provisioning.mobileprovision
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security import apple_distribution.p12 -k build.keychain -P "" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp provisioning.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # Optional: Hochladen zu TestFlight (Nur mit Apple Developer Account)
      - name: 🚀 Upload to TestFlight
        if: env.APPLE_API_KEY != ''
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          xcrun altool --upload-app -f build/ios/ipa/*.ipa -t ios --apiKey "$APPLE_API_KEY" --apiIssuer "$APPLE_API_ISSUER_ID"

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-flatpak, build-apk, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: "Automated release for version ${{ github.ref_name }}"
          draft: false
          prerelease: false
          files: |
            artifacts/app.flatpak/app.flatpak
            artifacts/linux-bin.zip/linux-bin.zip
            artifacts/windows-bin.zip/windows-bin.zip
            artifacts/my-flutter-app.apk/app-release.apk
